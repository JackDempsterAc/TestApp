{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Table","_this$props","this","props","characterData","removeCharacter","react_default","a","createElement","Table_TableHeader","Table_TableBody","Component","TableBody","rows","map","row","index","key","name","job","onClick","TableHeader","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","type","onChange","App","characters","filter","character","i","concat","toConsumableArray","className","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.379db33e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        const { characterData, removeCharacter } = this.props\r\n\r\n        return (\r\n            <table>\r\n                <TableHeader />\r\n                <TableBody characterData={characterData} removeCharacter={removeCharacter} />\r\n            </table>\r\n        )\r\n    }\r\n}\r\nconst TableBody =  props => {\r\n    const rows = props.characterData.map((row, index) => {\r\n        return (\r\n            <tr key={index}>\r\n            <td>{row.name}</td>\r\n            <td>{row.job}</td>\r\n            <td>\r\n                <button onClick={() => props.removeCharacter(index)}>Delete</button>\r\n            </td>\r\n            </tr>\r\n        )\r\n    })\r\n    return (\r\n        <tbody>{rows}</tbody>\r\n    )\r\n}\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Job</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Table","import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.initialState = {\r\n            name: '',\r\n            job: '',\r\n        }\r\n\r\n        this.state = this.initialState\r\n    }\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state)\r\n        this.setState(this.initialState)\r\n    }\r\n\r\n    render() {\r\n        const { name, job } = this.state;\r\n\r\n        return (\r\n            <form>\r\n                <label>Name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChange} />\r\n                <label>Job</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"job\"\r\n                    value={job}\r\n                    onChange={this.handleChange} />\r\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, {\n  Component\n} from 'react';\n//import logo from './logo.svg';\n//import './App.css';\nimport './index.css'\nimport Table from './Table'\nimport Form from './Form'\n\nclass App extends Component {\n  state = {\n    characters: [],\n  }\n\n  removeCharacter = index => {\n    const{ characters } = this.state\n\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index\n      }),\n    })\n  }\n\n  handleSubmit = character => {\n    this.setState({ characters: [...this.state.characters,character]})\n  }\n\n  render() {\n    const {characters } = this.state\n    return (<div className=\"Container\" >\n      <Table characterData={characters} removeCharacter={this.removeCharacter} />\n      <Form handleSubmit={this.handleSubmit}/>\n    </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}